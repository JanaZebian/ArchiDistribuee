---
openapi: 3.1.0
info:
  title: User API
  summary: This is the API of the User service
  description: This is the API of the User service
  contact:
    name: Helene Coullon
    url: https://helene-coullon.fr/
    email: helene.coullon@imt-atlantique.fr
  license:
    name: GPL v3
    url: https://www.gnu.org/licenses/gpl-3.0.en.html
  version: 1.0.0
tags:
  - name: admins
    description: Secured Admin-only calls
  - name: developers
    description: Operations available to regular developers
paths:
  \:
    get:
      tags:
        - developers
      summary: home page of the user service
      operationId: home
      responses:
        "200":
          description: welcome message
          content:
            text/html:
              schema:
                type: string
                example: <h1>Test</h1>
  /users/all:
    get:
      tags:
        - developers
      summary: Method that returns all the users in the database
      responses:
        "200":
          description: all users
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AllUsers'
  /users/userid/{userid}:
    get:
      tags:
        - developers
      summary: Method that returns a user by passing its id as an argument
      operationID: get_user_by_id
      parameters:
        - name: userid
          in: path
          description: User ID
          required: true
          schema:
            type: string
      responses:
        "200":
          description: user by user id
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        "400":
          description: Bad input parameter
    /users/addUser/{userid}:
      post:
        tags:
          - admins
        summary: Method that adds a user to the database
        operationID: add_user
        parameters:
          - name: : userid
            in: path
            description: User ID
            required: true
            schema:
              type: string
        requestBody:
          description: Inventory item to add
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        responses:
          "200":
            description: User added
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/User'
          "409":
            description: an existing item already exists
  /movielist/{userid}:
    get:
      tags:
        - developers
      summary: get list of movies from user Id
      description: Get in a json format the list of movies(title,rating,actors), by calling GraphQL requests from movie server
      operationId: getMovieList
      parameters:
        - name: userid
          in: path
          description: User ID
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Movie List
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AllMovies'
        "400":
          description: bad input parameter
  /movieById/{userid}/{id}:
    get:
      tags:
        - developers
      summary: get info on a film
      description: get the info on a film(title, rating, director,id) by calling the GraphQL requests from the Movie service
      operationId: get_movie_by_its_id
      parameters:
        - name: userid
          in: path
          description: User ID
          required: true
          schema:
            type: string
        - name: id
          in: path
          description: Movie id
          required: true
          schema:
            type: string
      responses:
        "200":
          description: all info
          content:
            application/json:
          schema:
            $ref: '#/components/schemas/MovieItem'
        "400":
          description: bad input parameter
  /booking/{userid}:
    get:
      tags:
        - developers
      summary: get movie by User ID
      description: obtain the reservations from a user's ID that asks the Booking service to verify that the reservations exists at the preferred time
      operationId: get_booking_by_user_id
      parameters:
        - name: userid
          in: path
          description: User ID
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Booking time
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Booking'
        "400":
          description: bad input parameter
  /bookings/{userid}:
    get:
      tags:
        - developers
      summary: get the schedule of the movies from the Booking Service by passing <userid> as an argument
      description: get the schedule of the movies in the database from the Booking Service(gRPC) by passing <userid> as a string
      operationId: get_bookings
      parameters:
        - name: userid
          in: path
          description: User ID
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Bookings
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Booking'
        "400":
          description: bad input parameter
    post:
      tags:
        - admins
      summary: adds an item
      description: adds a booking in the Booking Service's database by passing <userid> as a string argument
      operationID: add_booking_by_user
      parameters:
        - name: : userid
          in: path
          description: User ID
          required: true
          schema:
            type: string
      requestBody:
        description: Inventory item to add
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
      responses:
        "200":
          description: Booking added
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        "409":
          description: an existing item already exists
components:
  schemas:
    AllMovies:
      type: object
      required:
        - movies
      properties:
        movies:
          type: array
          items:
            type: object
            $ref: '#/components/schemas/MovieItem'
    MovieItem:
      type: object
      required:
        - title
        - rating
        - director
        - id
        - actors:
            - id
            - firstname
            - lastname
            - birthyear
            - films
      properties:
        title:
          type: string
          example: The Martian
        rating:
          type: integer
          example: 7
        director:
          type: string
          example: Paul McGuigan
        id:
          type: string
          example: 39ab85e5-5e8e-4dc5-afea-65dc368bd7ab
        actors:
          type: string array
          id:
            type: string
            example: actor1
          firstname:
            type: string
            example: Leonardo
          lastname:
            type: string
            example: DiCaprio
          birthyear:
            type: int
            example: 1974
      AllUsers:
        required:
          - users
        type: object
        properties:
          schedule:
            type: array
            items:
              $ref: '#/components/schemas/User'
      User:
        required:
          - id
          - name
          - last_active
        type: object
        properties:
          id:
            type: string
            example: "chris_rivers"
          name:
            type: string
            example: "Chris Rivers"
          last_active:
            type: int
            example: 1360031010