---
openapi: 3.1.0
info:
  title: User API
  summary: This is the API of the User service
  description: This is the API of the User service
  contact:
    name: Helene Coullon
    url: https://helene-coullon.fr/
    email: helene.coullon@imt-atlantique.fr
  license:
    name: GPL v3
    url: https://www.gnu.org/licenses/gpl-3.0.en.html
  version: 1.0.0
tags:
- name: admins
  description: Secured Admin-only calls
- name: developers
  description: Operations available to regular developers
paths:
  /:
    get:
      tags:
        - developers
      summary: home page of the user service
      operationId: home
      responses:
        "200":
          description: welcome message
          content:
            text/html:
              schema:
                type: string
                example: <h1>Test</h1>
  /users/all:
    get:
      tags:
        - developers
      summary: Method that returns all the users in the database
      responses:
        "200":
          description: all users
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AllUsers'
  /users/userid/{userid}:
    get:
      tags:
        - developers
      summary: Method that returns a user by passing as an argument his id
      operationID: get_user_by_id
      parameters:
        - name: userid
          in: path
          description: User ID
          required: true
          schema:
            type: string
      responses:
        "200":
          description: user by user id
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        "400":
          description: Bad input parameter
    /users/addUser/{userid}:
      post:
        tags:
          - admins
        summary: Method that adds a user to the database
        operationID: add_user
        parameters:
          - name: : userid
          in: path
          description: User ID
          required: true
          schema:
            type: string
        requestBody:
          description: Inventory item to add
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        responses:
          "200":
            description: User added
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/User'
          "409":
            description: an existing item already exists
    /booking/{userid}:
      get:
        tags:
          - developers
        summary: get movie by User ID
        description: obtain the reservations from ID of a user that asks the Booking service to verify that the reservations exists at the preferred time
        operationId: get_booking_by_userid
        parameters:
        - name: userid
          in : path
          description: User ID
          required: true
          schema:
            type: string
        responses:
           "200":
             description: Booking time
             content:
              application/json:
                  schema:
                      $ref: '#/components/schemas/Booking'
           "400":
             description: bad input parameter

    /getInfo/{userid}/{movieid}:
      get:
        tags:
          - developers
        summary: get info on a film
        description: get the info on film by asking the Movie service
        operationId: get_info_on_movie
        parameters:
        - name: userid
          in : path
          description: User ID
          required: true
          schema:
            type: string
        - name : movieid
          in : path
          description: Movie id
          required: true
          schema:
             type: string
        responses:
            "200":
                description: all info
                content:
                 application/json:
                schema:
                    $ref: '#/components/schemas/MovieItem'
            "400":
                description: bad input parameter
                            
components:
  schemas:
      booking: 
        type: object
        required: 
            - date
        properties:
            date:
                type: string
                example: 20151201
      MovieItem:
        type: object
        required:
            - title
            - rating
            - director
            - id
        properties:
            title:
                type: string
                example: The Martian
            rating:
                type: integer
                example: 7
            director:
                type: string
                example: Paul McGuigan
            id:
                type: string
                example: 39ab85e5-5e8e-4dc5-afea-65dc368bd7ab
      AllUsers:
        required:
          - users
        type: object
        properties:
          schedule:
            type: array
            items:
              $ref: '#/components/schemas/User'
      User:
        required:
          - id
          - name
          - last_active
        type: object
        properties:
          id:
            type: string
            example: "chris_rivers"
          name:
            type: string
            example: "Chris Rivers"
          last_active:
            type: int
            example: 1360031010